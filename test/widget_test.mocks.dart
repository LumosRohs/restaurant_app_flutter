// Mocks generated by Mockito 5.4.3 from annotations
// in restaurant_app/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:restaurant_app/data/api/api_service.dart' as _i2;
import 'package:restaurant_app/provider/restaurant_provider.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiService_0 extends _i1.SmartFake implements _i2.ApiService {
  _FakeApiService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RestaurantProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantProvider extends _i1.Mock
    implements _i3.RestaurantProvider {
  MockRestaurantProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApiService get apiService => (super.noSuchMethod(
        Invocation.getter(#apiService),
        returnValue: _FakeApiService_0(
          this,
          Invocation.getter(#apiService),
        ),
      ) as _i2.ApiService);

  @override
  String get query => (super.noSuchMethod(
        Invocation.getter(#query),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#query),
        ),
      ) as String);

  @override
  set query(String? _query) => super.noSuchMethod(
        Invocation.setter(
          #query,
          _query,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get message => (super.noSuchMethod(
        Invocation.getter(#message),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#message),
        ),
      ) as String);

  @override
  _i3.ResultState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i3.ResultState.loading,
      ) as _i3.ResultState);

  @override
  List<dynamic> get result => (super.noSuchMethod(
        Invocation.getter(#result),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<dynamic> fetchAllRestaurant() => (super.noSuchMethod(
        Invocation.method(
          #fetchAllRestaurant,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  dynamic setQuery(String? searchQuery) => super.noSuchMethod(Invocation.method(
        #setQuery,
        [searchQuery],
      ));

  @override
  _i5.Future<dynamic> searchRestaurant(String? query) => (super.noSuchMethod(
        Invocation.method(
          #searchRestaurant,
          [query],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
